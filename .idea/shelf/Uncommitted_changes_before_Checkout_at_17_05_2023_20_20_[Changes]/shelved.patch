Index: my_personal_training/Training_numpy.ipynb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n \"cells\": [\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 1,\r\n   \"metadata\": {\r\n    \"collapsed\": true,\r\n    \"ExecuteTime\": {\r\n     \"start_time\": \"2023-05-10T21:24:00.765965Z\",\r\n     \"end_time\": \"2023-05-10T21:24:01.317599Z\"\r\n    }\r\n   },\r\n   \"outputs\": [\r\n    {\r\n     \"name\": \"stdout\",\r\n     \"output_type\": \"stream\",\r\n     \"text\": [\r\n      \"<class 'numpy.ndarray'>\\n\"\r\n     ]\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"#Команды по библиотеке numpy\\n\",\r\n    \"#Create array from list\\n\",\r\n    \"\\n\",\r\n    \"import numpy as np\\n\",\r\n    \"nums_list = [10,12,14,16,20]\\n\",\r\n    \"nums_array = np.array(nums_list)\\n\",\r\n    \"print(type(nums_array))\\n\"\r\n   ]\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 2,\r\n   \"outputs\": [\r\n    {\r\n     \"data\": {\r\n      \"text/plain\": \"(3, 3)\"\r\n     },\r\n     \"execution_count\": 2,\r\n     \"metadata\": {},\r\n     \"output_type\": \"execute_result\"\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"#Create 2-d array\\n\",\r\n    \"\\n\",\r\n    \"row1 = [10,12,13]\\n\",\r\n    \"row2 = [45,32,16]\\n\",\r\n    \"row3 = [45,32,16]\\n\",\r\n    \"\\n\",\r\n    \"nums_2d = np.array([row1,row2,row3])\\n\",\r\n    \"nums_2d.shape\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"ExecuteTime\": {\r\n     \"start_time\": \"2023-05-10T21:27:23.602925Z\",\r\n     \"end_time\": \"2023-05-10T21:27:23.638377Z\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 3,\r\n   \"outputs\": [\r\n    {\r\n     \"name\": \"stdout\",\r\n     \"output_type\": \"stream\",\r\n     \"text\": [\r\n      \"[ 5  6  7  8  9 10]\\n\"\r\n     ]\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"#Create array\\n\",\r\n    \"\\n\",\r\n    \"nums_arr = np.arange(5,11)\\n\",\r\n    \"print(nums_arr)\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"ExecuteTime\": {\r\n     \"start_time\": \"2023-05-10T21:31:00.334323Z\",\r\n     \"end_time\": \"2023-05-10T21:31:00.396004Z\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 5,\r\n   \"outputs\": [\r\n    {\r\n     \"name\": \"stdout\",\r\n     \"output_type\": \"stream\",\r\n     \"text\": [\r\n      \"[ 5  7  9 11]\\n\"\r\n     ]\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"#Create array and define step (3-d parameter)\\n\",\r\n    \"\\n\",\r\n    \"nums_arr = np.arange(5,12,2)\\n\",\r\n    \"print(nums_arr)\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"ExecuteTime\": {\r\n     \"start_time\": \"2023-05-10T21:33:21.120581Z\",\r\n     \"end_time\": \"2023-05-10T21:33:21.161676Z\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 7,\r\n   \"outputs\": [\r\n    {\r\n     \"name\": \"stdout\",\r\n     \"output_type\": \"stream\",\r\n     \"text\": [\r\n      \"[[1. 1. 1. 1.]\\n\",\r\n      \" [1. 1. 1. 1.]\\n\",\r\n      \" [1. 1. 1. 1.]\\n\",\r\n      \" [1. 1. 1. 1.]\\n\",\r\n      \" [1. 1. 1. 1.]\\n\",\r\n      \" [1. 1. 1. 1.]]\\n\"\r\n     ]\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"#Ones method\\n\",\r\n    \"\\n\",\r\n    \"ones_array = np.ones((6,4))\\n\",\r\n    \"print(ones_array)\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"ExecuteTime\": {\r\n     \"start_time\": \"2023-05-10T21:35:20.780975Z\",\r\n     \"end_time\": \"2023-05-10T21:35:20.809067Z\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 8,\r\n   \"outputs\": [\r\n    {\r\n     \"name\": \"stdout\",\r\n     \"output_type\": \"stream\",\r\n     \"text\": [\r\n      \"[[1. 0. 0. 0. 0.]\\n\",\r\n      \" [0. 1. 0. 0. 0.]\\n\",\r\n      \" [0. 0. 1. 0. 0.]\\n\",\r\n      \" [0. 0. 0. 1. 0.]\\n\",\r\n      \" [0. 0. 0. 0. 1.]]\\n\"\r\n     ]\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"#The eye method\\n\",\r\n    \"\\n\",\r\n    \"eyes_array = np.eye(5)\\n\",\r\n    \"print(eyes_array)\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"ExecuteTime\": {\r\n     \"start_time\": \"2023-05-10T21:36:36.910079Z\",\r\n     \"end_time\": \"2023-05-10T21:36:36.986884Z\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 9,\r\n   \"outputs\": [\r\n    {\r\n     \"name\": \"stdout\",\r\n     \"output_type\": \"stream\",\r\n     \"text\": [\r\n      \"[[ 1.40992239 -0.1288839   1.28015859 -1.0560056  -0.34885488]\\n\",\r\n      \" [-0.17935048  0.48595777 -1.03889761 -2.12579171 -1.01410292]\\n\",\r\n      \" [ 0.36452516 -0.26150519 -0.67304663 -2.06566778  0.36943484]\\n\",\r\n      \" [-0.30186171  0.46632115  0.59504514  0.84967767  0.27205442]]\\n\"\r\n     ]\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"#Random method (normal distr)\\n\",\r\n    \"\\n\",\r\n    \"normal_random = np.random.randn(4,5)\\n\",\r\n    \"print(normal_random)\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"ExecuteTime\": {\r\n     \"start_time\": \"2023-05-10T21:38:22.183818Z\",\r\n     \"end_time\": \"2023-05-10T21:38:22.211822Z\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 10,\r\n   \"outputs\": [\r\n    {\r\n     \"name\": \"stdout\",\r\n     \"output_type\": \"stream\",\r\n     \"text\": [\r\n      \"[13 38 34  7 35 20]\\n\"\r\n     ]\r\n    },\r\n    {\r\n     \"name\": \"stderr\",\r\n     \"output_type\": \"stream\",\r\n     \"text\": [\r\n      \"C:\\\\Users\\\\Lenovo\\\\AppData\\\\Local\\\\Temp\\\\ipykernel_27684\\\\1689963911.py:3: DeprecationWarning: This function is deprecated. Please call randint(5, 50 + 1) instead\\n\",\r\n      \"  integer_random = np.random.random_integers(5,50,6)\\n\"\r\n     ]\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"#Random integers from ... to (! the upper number is not included i.e. for 50 it is necessary write 50+1 (51)\\n\",\r\n    \"\\n\",\r\n    \"integer_random = np.random.random_integers(5,50,6)\\n\",\r\n    \"print(integer_random)\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"ExecuteTime\": {\r\n     \"start_time\": \"2023-05-10T21:40:31.714109Z\",\r\n     \"end_time\": \"2023-05-10T21:40:31.776636Z\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 11,\r\n   \"outputs\": [\r\n    {\r\n     \"name\": \"stdout\",\r\n     \"output_type\": \"stream\",\r\n     \"text\": [\r\n      \"[ 1  2  3  4  5  6  7  8  9 10]\\n\"\r\n     ]\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"#Reshaping and slicing\\n\",\r\n    \"\\n\",\r\n    \"s = np.arange(1,11)\\n\",\r\n    \"print(s)\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"ExecuteTime\": {\r\n     \"start_time\": \"2023-05-10T21:43:55.768774Z\",\r\n     \"end_time\": \"2023-05-10T21:43:55.856008Z\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 12,\r\n   \"outputs\": [\r\n    {\r\n     \"name\": \"stdout\",\r\n     \"output_type\": \"stream\",\r\n     \"text\": [\r\n      \"2\\n\",\r\n      \"[2 3 4]\\n\",\r\n      \"[1 2 3 4 5]\\n\"\r\n     ]\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"print(s[1])\\n\",\r\n    \"\\n\",\r\n    \"print(s[1:4])\\n\",\r\n    \"\\n\",\r\n    \"print(s[:5])\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"ExecuteTime\": {\r\n     \"start_time\": \"2023-05-10T21:45:02.873077Z\",\r\n     \"end_time\": \"2023-05-10T21:45:02.909136Z\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": 13,\r\n   \"outputs\": [\r\n    {\r\n     \"name\": \"stdout\",\r\n     \"output_type\": \"stream\",\r\n     \"text\": [\r\n      \"[[10 12 13]\\n\",\r\n      \" [45 32 16]\\n\",\r\n      \" [45 32 16]]\\n\",\r\n      \"[[10 12 13]\\n\",\r\n      \" [45 32 16]]\\n\",\r\n      \"[[32 16]\\n\",\r\n      \" [32 16]]\\n\"\r\n     ]\r\n    }\r\n   ],\r\n   \"source\": [\r\n    \"print(nums_2d)\\n\",\r\n    \"\\n\",\r\n    \"print(nums_2d[:2,:])\\n\",\r\n    \"\\n\",\r\n    \"print(nums_2d[1:,1:])\"\r\n   ],\r\n   \"metadata\": {\r\n    \"collapsed\": false,\r\n    \"ExecuteTime\": {\r\n     \"start_time\": \"2023-05-10T21:47:21.113703Z\",\r\n     \"end_time\": \"2023-05-10T21:47:21.177283Z\"\r\n    }\r\n   }\r\n  },\r\n  {\r\n   \"cell_type\": \"code\",\r\n   \"execution_count\": null,\r\n   \"outputs\": [],\r\n   \"source\": [],\r\n   \"metadata\": {\r\n    \"collapsed\": false\r\n   }\r\n  }\r\n ],\r\n \"metadata\": {\r\n  \"kernelspec\": {\r\n   \"display_name\": \"Python 3\",\r\n   \"language\": \"python\",\r\n   \"name\": \"python3\"\r\n  },\r\n  \"language_info\": {\r\n   \"codemirror_mode\": {\r\n    \"name\": \"ipython\",\r\n    \"version\": 2\r\n   },\r\n   \"file_extension\": \".py\",\r\n   \"mimetype\": \"text/x-python\",\r\n   \"name\": \"python\",\r\n   \"nbconvert_exporter\": \"python\",\r\n   \"pygments_lexer\": \"ipython2\",\r\n   \"version\": \"2.7.6\"\r\n  }\r\n },\r\n \"nbformat\": 4,\r\n \"nbformat_minor\": 0\r\n}\r\n
===================================================================
diff --git a/my_personal_training/Training_numpy.ipynb b/my_personal_training/Training_numpy.ipynb
--- a/my_personal_training/Training_numpy.ipynb	
+++ b/my_personal_training/Training_numpy.ipynb	
@@ -6,8 +6,8 @@
    "metadata": {
     "collapsed": true,
     "ExecuteTime": {
-     "start_time": "2023-05-10T21:24:00.765965Z",
-     "end_time": "2023-05-10T21:24:01.317599Z"
+     "start_time": "2023-05-17T20:06:57.272718Z",
+     "end_time": "2023-05-17T20:06:57.710445Z"
     }
    },
    "outputs": [
